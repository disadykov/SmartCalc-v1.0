#include <check.h>

#include "../s21_core.h"

#test test_stack_number1
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data.value = 4.4;
stack_data.priority = 0;
stack_data.symbols = ' ';
stack_data.type = NUMBER;
stack_data.nextPtr = NULL;
int code = s21_stack_push(&stack_item, stack_data);
ck_assert_int_eq(ERROR_NO, code);
s21_stack_clear(&stack_item);

#test test_stack_number2
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data.value = 4.4;
stack_data.priority = 0;
stack_data.symbols = ' ';
stack_data.type = NUMBER;
stack_data.nextPtr = NULL;
s21_stack_push(&stack_item, stack_data);
s21_stack_clear(&stack_item);
int code = s21_isEmpty(stack_item);
ck_assert_int_eq(1, code);

#test test_stack_number3
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data.value = 4.4;
stack_data.priority = 0;
stack_data.symbols = ' ';
stack_data.type = NUMBER;
stack_data.nextPtr = NULL;
s21_stack_push(&stack_item, stack_data);
int code = s21_isEmpty(stack_item);
ck_assert_int_eq(0, code);
s21_stack_clear(&stack_item);

#test test_stack_number4
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data = s21_create_item("3.1", 0, ' ', NUMBER);
s21_stack_push(&stack_item, stack_data);
stack_t stack_result = s21_stack_pop(&stack_item);
ck_assert_int_eq(stack_data.type, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number5
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data = s21_create_item("3.1", 4, 's', FUNCTION);
s21_stack_push(&stack_item, stack_data);
stack_t stack_result = s21_stack_pop(&stack_item);
ck_assert_int_eq(stack_data.type, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number6
StackDataPtr stack_item = NULL;
stack_t stack_data;
stack_data = s21_create_item("3.1", 4, 's', FUNCTION);
s21_stack_push(&stack_item, stack_data);
s21_stack_revers(&stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(stack_data.type, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number7
int code = s21_isOperation('+');
ck_assert_int_eq(1, code);

#test test_stack_number8
int code = s21_isOperation('s');
ck_assert_int_eq(0, code);

#test test_stack_number9
int code = s21_get_priority('+');
ck_assert_int_eq(1, code);

#test test_stack_number10
int code = s21_get_priority('*');
ck_assert_int_eq(2, code);

#test test_stack_number11
int code = s21_get_priority('^');
ck_assert_int_eq(3, code);

#test test_stack_number12
int code = s21_get_priority('s');
ck_assert_int_eq(4, code);

#test test_stack_number13
int code = s21_get_priority('(');
ck_assert_int_eq(5, code);

#test test_stack_number14
int code = s21_get_priority('@');
ck_assert_int_eq(0, code);

#test test_stack_number15
int code = s21_valid_function('s');
ck_assert_int_eq(1, code);

#test test_stack_number16
int code = s21_valid_function('g');
ck_assert_int_eq(0, code);

#test test_stack_number17
char expression[256]="s";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(FUNCTION, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number18
char expression[256]="+";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(OPERATION, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number19
char expression[256]="3";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(NUMBER, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number20
char expression[256]="(";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(LEFT_BRACKET, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number21
char expression[256]="@";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
int code = s21_convert_to_stack(strarray, lexems_count, &stack_item);
ck_assert_int_eq(code, ERROR_BAD_CONVERT);

#test test_stack_number22
char expression[256]=")";
char strarray[500][256];
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
stack_t stack_result = s21_stack_peek(&stack_item);
ck_assert_int_eq(RIGHT_BRACKET, stack_result.type);
s21_stack_clear(&stack_item);

#test test_stack_number23
char expression[256]="2+2+2";
char strarray[500][256];
s21_replace_functions(expression);
s21_add_separator(expression);
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
s21_stack_revers(&stack_item);
int code = s21_polish_postfix(&stack_item);
ck_assert_int_eq(ERROR_NO, code);
s21_stack_clear(&stack_item);

#test test_stack_number24
char expression[256]="(2+2)*2";
char strarray[500][256];
s21_replace_functions(expression);
s21_add_separator(expression);
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
s21_stack_revers(&stack_item);
int code = s21_polish_postfix(&stack_item);
ck_assert_int_eq(ERROR_NO, code);
s21_stack_clear(&stack_item);

#test test_stack_number25
char expression[256]="sin(-4)";
char strarray[500][256];
s21_replace_functions(expression);
s21_add_separator(expression);
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
s21_stack_revers(&stack_item);
int code = s21_polish_postfix(&stack_item);
ck_assert_int_eq(ERROR_NO, code);
s21_stack_clear(&stack_item);

#test test_stack_number26
char expression[256]="sin(x)";
char strarray[500][256];
s21_replace_functions(expression);
s21_add_separator(expression);
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
s21_stack_revers(&stack_item);
int code = s21_polish_postfix(&stack_item);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);
s21_stack_clear(&stack_item);

#test test_stack_number27
char expression[256]="(8+2*5)/(1+3*2-4)";
char strarray[500][256];
s21_replace_functions(expression);
s21_add_separator(expression);
int lexems_count = s21_lexems(expression, strarray);
StackDataPtr stack_item = NULL;
s21_convert_to_stack(strarray, lexems_count, &stack_item);
s21_stack_revers(&stack_item);
int code = s21_polish_postfix(&stack_item);
ck_assert_int_eq(ERROR_NO, code);
s21_stack_clear(&stack_item);