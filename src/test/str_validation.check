#include <check.h>

#include "../s21_core.h"

#test test_str_validation_number1
char symbol = 'i';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number2
char symbol = ')';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number3
char symbol = '+';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number4
char symbol = '-';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number5
char symbol = '*';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number6
char symbol = '/';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number7
char symbol = '^';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number8
char symbol = 'm';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number9
char symbol = 'o';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number10
char symbol = 'd';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number11
char symbol = 'c';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number12
char symbol = 's';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number13
char symbol = 'i';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number14
char symbol = 'n';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number15
char symbol = 't';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number16
char symbol = 'a';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number17
char symbol = 'q';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number18
char symbol = 'r';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number19
char symbol = 'l';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number20
char symbol = 'g';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number21
char symbol = 'x';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number22
char symbol = '.';
int code = s21_is_characters(symbol);
ck_assert_int_eq(0, code);

#test test_str_validation_number23
char symbol = ',';
int code = s21_is_characters(symbol);
ck_assert_int_eq(1, code);

#test test_str_validation_number24
char symbol = 'w';
int code = s21_is_characters(symbol);
ck_assert_int_eq(1, code);

#test test_str_validation_number25
char symbol = '<';
int code = s21_is_characters(symbol);
ck_assert_int_eq(1, code);

#test test_str_validation_number26
char symbol = 'z';
int code = s21_is_characters(symbol);
ck_assert_int_eq(1, code);

#test test_str_validation_number27
char s[] = "sin(x)-2";
int code = s21_valid_characters(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number28
char s[] = "sin(x)-2.9";
int code = s21_valid_characters(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number29
char s[] = "sin(x)-2,9";
int code = s21_valid_characters(s);
ck_assert_int_eq(1, code);

#test test_str_validation_number30
int code = s21_valid_characters(NULL);
ck_assert_int_eq(2, code);

#test test_str_validation_number31
char s[] = "sin(x)-2,9";
int code = s21_is_str_empty(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number32
char s[] = "";
int code = s21_is_str_empty(s);
ck_assert_int_eq(3, code);

#test test_str_validation_number33
char s[] = "Errors not found";
ck_assert_str_eq(s21_strerror(0), s);

#test test_str_validation_number34
char s[] = "sin(x)-2,9";
int code = s21_expression_size(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number35
char s[] = "s";
int code = s21_expression_size(s);
ck_assert_int_eq(4, code);

#test test_str_validation_number36
char s[] = "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
int code = s21_expression_size(s);
ck_assert_int_eq(5, code);

#test test_str_validation_number37
char s[] = "()";
int code = s21_brackets_count(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number38
char s[] = "(())";
int code = s21_brackets_count(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number39
char s[] = "(()";
int code = s21_brackets_count(s);
ck_assert_int_eq(6, code);

#test test_str_validation_number40
char s[] = "sin(x)-2.9";
int code = s21_check_point(s);
ck_assert_int_eq(0, code);

#test test_str_validation_number41
char s[] = ".sin(x)-2.9";
int code = s21_check_point(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number42
char s[] = "sin(x)-2.9.";
int code = s21_check_point(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number43
char s[] = "sin(x)-2..9";
int code = s21_check_point(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number44
char s[] = "sin(x)-2.9";
int code = s21_check_operators(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number45
char s[] = "1.0-2.9";
int code = s21_check_operators(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number46
char s[] = "1.0";
int code = s21_check_operators(s);
ck_assert_int_eq(ERROR_NO_OPERATORS, code);

#test test_str_validation_number47
int code = s21_is_operator('+');
ck_assert_int_eq(1, code);

#test test_str_validation_number48
int code = s21_is_operator('a');
ck_assert_int_eq(0, code);

#test test_str_validation_number49
char s[] = "1.0-2.9";
int code = s21_correct_operators(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number50
char s[] = "1.0-2.9-";
int code = s21_correct_operators(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number51
char s[] = "1.0-+2.9";
int code = s21_correct_operators(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number52
char s[255] = "sin(x)-1.0-+2.9";
int code = s21_check_brackets(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number53
char s[255] = "sin)x()+2*3)";
int code = s21_check_brackets(s);
ck_assert_int_eq(ERROR_BAD_BRACKETS, code);

#test test_str_validation_number54
char s[255] = "sin(x)-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number55
char s[255] = "sin4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number56
char s[255] = "cos4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number57
char s[255] = "tan4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number58
char s[255] = "sqrt4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number59
char s[255] = "log4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number60
char s[255] = "ln4-1.0+2.9";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number61
char s[255] = "ln4-1.0+2.9";
int code = s21_last_symbol(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number62
char s[255] = "ln4-1.0+(2mod2)";
int code = s21_last_symbol(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number63
char s[255] = "ln4-1.0+sin";
int code = s21_last_symbol(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number64
char s[255] = "sin(x)";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number65
char s[] = "";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_EMPTY_STR, code);

#test test_str_validation_number66
char s[] = "s";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_SHORT_STR, code);

#test test_str_validation_number67
char s[] = "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_LONG_STR, code);

#test test_str_validation_number68
char s[] = "sin(x)-2,9";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_SYMBOL, code);

#test test_str_validation_number69
char s[] = "(()";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_BRACKETS, code);

#test test_str_validation_number70
char s[] = ".sin(x)-2.9";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number71
char s[] = "1.0";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_NO_OPERATORS, code);

#test test_str_validation_number72
char s[] = "1.0-2.9-";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number73
char s[255] = "sin(x))-(1.0-+2.9";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number74
char s[255] = "sin4-1.0+2.9";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number75
char s[255] = "ln4-1.0+sin";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number76
char s[255] = "ln(4)-1.0mod";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number77
char s[255] = "sin(x))-(1.0+2.9";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_BRACKETS, code);

#test test_str_validation_number78
char s[255] = "s(4.0)+c(4.0)";
char result[255] = "s ( 4.0 )  + c ( 4.0 ) ";
s21_add_separator(s);
ck_assert_str_eq(result, s);

#test test_str_validation_number79
char s[255] = "s(4.0)+c(4.0)";
char strarray[500][256];
int code = s21_lexems(s, strarray);
ck_assert_int_eq(1, code);

#test test_str_validation_number80
char s[255] = "sin()";
int code = s21_empty_brackets(s);
ck_assert_int_eq(ERROR_EMPTY_BRACKETS, code);

#test test_str_validation_number81
char s[255] = "*4";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number82
char s[255] = "-4";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number83
char s[255] = "sin()";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_EMPTY_BRACKETS, code);

#test test_str_validation_number84
char s[255] = "-1-(-2)";
int code = s21_first_operator_and_sign(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number85
char s[] = "-1*sin(cos(tan(-x^2)^3)^4)";
int code = s21_correct_operators(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number86
char s[255] = "-1*sin(cos(tan(-x^2)^3)^4)";
int code = s21_correct_func(s);
ck_assert_int_eq(ERROR_NO, code);

#test test_str_validation_number87
char s[255] = "3mod-6";
int code = s21_sing_before_func(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);

#test test_str_validation_number88
char s[] = "3mod-6";
int code = s21_expression_check(s);
ck_assert_int_eq(ERROR_BAD_EXPRESSION, code);